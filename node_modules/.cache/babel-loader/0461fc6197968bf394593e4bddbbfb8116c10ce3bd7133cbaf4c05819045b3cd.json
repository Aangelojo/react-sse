{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useSSE.tsx\nimport { useEffect, useState } from \"react\";\nexport function useSSE(eventName, options) {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (options.disabled || !options.path) {\n      return;\n    }\n    const eventSource = new EventSource(options.path);\n    const handleMessage = event => {\n      try {\n        const parsedData = JSON.parse(event.data);\n        setData(parsedData);\n      } catch (err) {\n        setError(err instanceof Error ? err : new Error(\"Failed to parse SSE data\"));\n      }\n    };\n    eventSource.addEventListener(eventName, handleMessage);\n    eventSource.onerror = err => {\n      setError(new Error(\"SSE connection error\"));\n      eventSource.close();\n    };\n    return () => {\n      eventSource.removeEventListener(eventName, handleMessage);\n      eventSource.close();\n    };\n  }, [eventName, options.path, options.disabled]);\n  return {\n    data,\n    error\n  };\n}\n_s(useSSE, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");","map":{"version":3,"names":["useEffect","useState","useSSE","eventName","options","_s","data","setData","error","setError","disabled","path","eventSource","EventSource","handleMessage","event","parsedData","JSON","parse","err","Error","addEventListener","onerror","close","removeEventListener"],"sources":["/Users/hayden/Documents/react/sse-demo/src/hooks/useSSE.tsx"],"sourcesContent":["// src/hooks/useSSE.tsx\nimport { useEffect, useState } from \"react\";\n\ninterface SSEOptions<T> {\n  path: string | null;\n  disabled?: boolean;\n}\n\nexport function useSSE<T>(eventName: string, options: SSEOptions<T>) {\n  const [data, setData] = useState<T | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    if (options.disabled || !options.path) {\n      return;\n    }\n\n    const eventSource = new EventSource(options.path);\n\n    const handleMessage = (event: MessageEvent) => {\n      try {\n        const parsedData = JSON.parse(event.data) as T;\n        setData(parsedData);\n      } catch (err) {\n        setError(\n          err instanceof Error ? err : new Error(\"Failed to parse SSE data\")\n        );\n      }\n    };\n\n    eventSource.addEventListener(eventName, handleMessage);\n\n    eventSource.onerror = (err) => {\n      setError(new Error(\"SSE connection error\"));\n      eventSource.close();\n    };\n\n    return () => {\n      eventSource.removeEventListener(eventName, handleMessage);\n      eventSource.close();\n    };\n  }, [eventName, options.path, options.disabled]);\n\n  return { data, error };\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAO3C,OAAO,SAASC,MAAMA,CAAIC,SAAiB,EAAEC,OAAsB,EAAE;EAAAC,EAAA;EACnE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAW,IAAI,CAAC;EAChD,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAe,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,IAAII,OAAO,CAACM,QAAQ,IAAI,CAACN,OAAO,CAACO,IAAI,EAAE;MACrC;IACF;IAEA,MAAMC,WAAW,GAAG,IAAIC,WAAW,CAACT,OAAO,CAACO,IAAI,CAAC;IAEjD,MAAMG,aAAa,GAAIC,KAAmB,IAAK;MAC7C,IAAI;QACF,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACT,IAAI,CAAM;QAC9CC,OAAO,CAACS,UAAU,CAAC;MACrB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZV,QAAQ,CACNU,GAAG,YAAYC,KAAK,GAAGD,GAAG,GAAG,IAAIC,KAAK,CAAC,0BAA0B,CACnE,CAAC;MACH;IACF,CAAC;IAEDR,WAAW,CAACS,gBAAgB,CAAClB,SAAS,EAAEW,aAAa,CAAC;IAEtDF,WAAW,CAACU,OAAO,GAAIH,GAAG,IAAK;MAC7BV,QAAQ,CAAC,IAAIW,KAAK,CAAC,sBAAsB,CAAC,CAAC;MAC3CR,WAAW,CAACW,KAAK,CAAC,CAAC;IACrB,CAAC;IAED,OAAO,MAAM;MACXX,WAAW,CAACY,mBAAmB,CAACrB,SAAS,EAAEW,aAAa,CAAC;MACzDF,WAAW,CAACW,KAAK,CAAC,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACpB,SAAS,EAAEC,OAAO,CAACO,IAAI,EAAEP,OAAO,CAACM,QAAQ,CAAC,CAAC;EAE/C,OAAO;IAAEJ,IAAI;IAAEE;EAAM,CAAC;AACxB;AAACH,EAAA,CApCeH,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}